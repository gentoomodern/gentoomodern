#!/usr/bin/env python3

import os, sys, re
from typing import Tuple
from include.gentoomodern_common import arch_config_path, config_path, output_path, profiles_amd64, usage_str, patches_workdir, patches_in_progress_dir, saved_patches_path, topatch_config_path, stages_path, squashed_path, emergelogs_path, env_output_path, portage_output_path, sets_output_path, patches_output_path

from include.freshroot import freshroot
from include.sync import sync
from include.swap_stage import swap_stage
from include.composefile import create_composefile
from include.tag_parser import tag_parser
from include.get_active_stage import get_active_stage
from include.list_stages import list_stages
from include.list_profiles import list_profiles
from include.set_desired_stage import set_desired_stage
from include.set_desired_profile import set_desired_profile
from include.get_desired_stage import get_desired_stage
from include.get_desired_profile import get_desired_profile
from include.run_build import run_build
from include.get_docker_tag import get_docker_tag
from include.save_tarball import save_tarball
from include.download_tarball import download_tarball
from include.patches import prep_patch, try_patch, save_patch
from include.ui_patch_prep_handler import ui_patch_prep_handler, prep_str
from include.downloader import downloader
from include.kernel_munger import kernel_munger
from include.stage_exists import stage_exists

# Our commandline keywords
ls_str          = 'ls'
rm_str          = 'rm'
set_str         = 'set'
sync_str        = 'sync'
patch_str       = 'patch'
pipeline_str    = 'pipeline'
freshroot_str   = 'freshroot'
bootstrap_str   = 'bootstrap'
profile_str     = 'profile'
stage_str       = 'stage'
kernel_str      = 'kernel'
config_str      = 'config'
diff_str        = 'diff'
pull_str        = 'pull'
help_str        = 'help'
patch_str       = 'patch'
all_str         = 'all'
prep_str        = 'prep'
try_str         = 'try'
save_str        = 'save'


# First word after the "gentoomodern" command.
primary_commands = (profile_str, stage_str, sync_str, pipeline_str, freshroot_str, bootstrap_str, patch_str, kernel_str )
# Commands you can use ls and set to visualize and manipulate.
#ls_and_set_usedwiths = (profile_str, stage_str)
# 
#verbs = (ls_str, set_str)

# Here we define CLI help functions for when the user needs it.

# Print usage_str messages.
def print_usage_stage_ls():
    print(usage_str + stage_str + ' ' + ls_str)

def print_usage_stage_set():
    print(usage_str + stage_str + ' ' + set_str + ' <name>')

def print_usage_profile_ls():
    print(usage_str + profile_str + ' ' + ls_str)

def print_usage_profile_set():
    print(usage_str + profile_str + ' ' + set_str + ' <name>')

def print_usage_stage():
    print_usage_stage_ls()
    print_usage_stage_set()

def print_usage_profile():
    print_usage_profile_ls()
    print_usage_profile_set()

def print_usage_bootstrap():
    print(usage_str + bootstrap_str + ' <name|"' + all_str +'">')

def print_usage_patch():
    patch_usage = usage_str + patch_str + ' '
    print(patch_usage + prep_str + '  <name> <package> <version-str>')
    print(patch_usage + try_str + ' <name>')
    print(patch_usage + save_str + ' <name>')

def print_usage_kernel():
    kernel_usage = usage_str + kernel_str + ' '
    print(kernel_usage + prep_str + ' <config>')
    print(kernel_usage + save_str + ' <config>')
    print(kernel_usage + set_str + ' <sources>')

def print_no_profile():
    print("You need to set a base profile before continuing.")

def print_usage():
    print(usage_str + freshroot_str)
    print(usage_str + pipeline_str)
    print(usage_str + sync_str)
    print_usage_bootstrap()
    print_usage_profile()
    print_usage_stage()
    print_usage_kernel()

###################################
# We do the following every time! #
###################################
arch = open(arch_config_path).read().strip()
# Now we create importage config files, so that they aren't automatically created with root:root permissions
for d in (patches_workdir, patches_in_progress_dir, saved_patches_path, topatch_config_path, stages_path, squashed_path, emergelogs_path, env_output_path, portage_output_path, sets_output_path, patches_output_path):
    os.makedirs(d, exist_ok = True)

##################################################################
# This handles the bootstrap of each stage, built from upstream. #
##################################################################
def pull_sequence(profile : str):
    if download_tarball(arch, profile):
    # swap_stage(arch, profile, 'gentoomodern/builder')
    # run_build(True)
        save_tarball(arch, profile, 'gentoomodern/builder', bool(True))

###################################
# Now, we get properly started... #
###################################

##########################
# Get the first command. #
##########################
prime_cmd = ''
if len(sys.argv) > 1:
    if sys.argv[1] in primary_commands:
        prime_cmd = sys.argv[1]
    else:
        print_usage()
        exit()
################################################
# Stage definitions-related commands (ls/set). #
################################################
if prime_cmd == stage_str:
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing stages
        list_stages()
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting stage
        if not sys.argv[3].isnumeric():
            set_desired_stage(sys.argv[3])
        else:
            print("You need to set a stage by name, as numbers will change over time.")
        exit()
    else: # Error message for stages
        print_usage_stage()
        exit()
#####################################
# Profile-related command (ls/set). #
#####################################
elif prime_cmd == profile_str:
    if sys.argv[2] == ls_str and len(sys.argv) == 3: # Listing profiles
        list_profiles(arch)
        exit()
    elif sys.argv[2] == set_str and len(sys.argv) == 4: # Setting profile
        if not sys.argv[3].isnumeric():
            set_desired_profile(arch, sys.argv[3])
        else:
            print("You need to set a profile by name.")
        exit()
    else: # Error message for profile
        print_usage_profile() 
        exit()
###############################################
# Bootstrap a stage from an upstream tarball. #
###############################################
elif prime_cmd == bootstrap_str:
    # If we are to pull all stages and bootstrap. Risky and time-consuming.
    if len(sys.argv) > 2 and sys.argv[2] == all_str:
        for p in profiles_amd64:
            pull_sequence(p)
    # If we have an profile argument that matches what we need.
    elif len(sys.argv) > 2 and sys.argv[2] in profiles_amd64:
        pull_sequence(sys.argv[2])
    # If we have a profile argument but no match.
    elif len(sys.argv) > 2:
        exit("Could not find " + sys.argv[2] + " " + " in supported profiles.")
    # We use the profile user has explicitly set as her desired default.
    else:
        if get_desired_profile()[0]:
            pull_sequence(get_desired_profile()[1])
        else:
            exit("Tried to bootstrap, but no profile was set.")
    exit()
####################
# Handle patching. #
####################
elif prime_cmd == patch_str:
    error_str = usage_str
    if len(sys.argv) > 2 and sys.argv[2] == prep_str:
        ui_patch_prep_handler(3).handle()
    # We try a patch that is currently being worked upon.
    elif len(sys.argv) > 2 and sys.argv[2] == try_str:
        if len(sys.argv) > 3:
            patch_name = sys.argv[3]
            print(patch_name)
            try_patch(patch_name)
        else:
            print("You need to provide a patch name to try.")
    # We save a patch to our config/patches directory
    elif len(sys.argv) > 2 and sys.argv[2] == save_str:
        if len(sys.argv) > 3:
            patch_name = sys.argv[3]
            save_patch(patch_name)
        else:
            exit("Under what name do you wish to save the patch?")
    exit()
################################
# Handle kernel configuration. #
################################
elif prime_cmd == kernel_str:
    error_str = usage_str + kernel_str + " "
    # We create a work environment for the user to work in.
    if len(sys.argv) > 2 and sys.argv[2] == prep_str:
        exit("Not implemented yet.")
    elif len(sys.argv) > 2 and sys.argv[2] == save_str:
        exit("Not implemented yet.")
    else:
        print_kernel_usage()
        exit()
####################################
# Deal with the freshroot command. #
####################################
elif prime_cmd == freshroot_str: 
    freshroot()
#########################
# Run pipelined builds. #
#########################
elif prime_cmd == pipeline_str:
    exit("Not implemented yet.")
    # Get stage defines from buildlist and build them.
    # TODO: Implement
######################
# Sync Portage tree. #
######################
elif prime_cmd == sync_str:
    sync(arch)
else:
    print_usage()
